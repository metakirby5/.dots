[user]
  name = Ethan Chan
  email = metakirby5@gmail.com
[core]
  excludesfile = ~/.config/git/ignore          # global ignore
  whitespace = space-before-tab,trailing-space # error on bad whitespace
[push]
  default = upstream         # push to upstream
[pull]
  rebase = true              # rebase instead of merge on pull
[merge]
  defaultToUpstream = true   # merge with upstream by default
  log = true                 # summary on merge
  tool = vimdiff             # use vimdiff
  conflictstyle = diff3      # use HEAD/base/other style conflicts
[mergetool]
  prompt = false             # don't prompt when using mergetool
[rebase]
  autosquash = true          # reposition fixups
[branch]
  autosetuprebase = always   # rebase on pull, not merge
[apply]
  whitespace = fix           # fix whitespace when applying patches
[diff]
  renames = copies           # detect renames and copies
  compactionHeuristic = true # improve diffs
  tool = vimdiff             # use vimdiff
[diff "bin"]
  textconv = hexdump -v -C   # diff binaries by hexdump
[difftool]
  prompt = false             # don't prompt when using difftool
[grep]
  lineNumber = true          # show line number in output
  fullName = true            # filenames are relative to VCS root
[rerere]
  enabled = true             # remember past conflict resolutions
[log]
  date = local               # use local time
  decorate = short           # show refs
[color]
  ui = auto
  diff = auto
  status = auto
  branch = auto
[alias]
  # misc
  i = init
  cl = clone --recursive
  rt = remote -v
  co = checkout
  ci = commit
  cp = cherry-pick
  t = tag
  r = reset

  # Tools
  mt = mergetool
  dt = difftool

  # push / pull
  p = pull
  ps = "!git stash save; git pull; git stash pop"
  u = push
  up = push -u origin HEAD

  # status
  s  = status --short
  st = status

  # branch
  b = branch -vv
  br = branch -vv --remote
  ba = branch -vv --all
  # delete branches whose upstream is deleted
  bd = "!git fetch -p && git branch -vv | awk '/^[^*].*: gone]/{print $1}' | xargs git branch -D"

  # diff
  d   = diff --color-words
  dl  = diff
  ds  = diff --stat
  dns  = diff --name-status
  dc  = diff --color-words --cached
  dcl = diff --cached
  dcs  = diff --stat --cached
  dcns  = diff --name-status --cached

  # add
  a  = add
  aa = add --all
  ai = add --interactive
  ap = add --patch

  # stash
  su = stash save
  sl = stash list --pretty=format:'%C(yellow)%gd %C(green)%ci %C(reset)%s%C(magenta)%d'
  slr = stash list --pretty=format:'%C(yellow)%gd %C(green)%ci %C(reset)%s%C(magenta)%d' --date=relative
  slp = stash list --pretty=format:'%C(yellow)%gd %C(green)%ci %C(reset)%s%C(magenta)%d' --patch --color-words
  slpl = stash list --pretty=format:'%C(yellow)%gd %C(green)%ci %C(reset)%s%C(magenta)%d' --patch
  sls = stash list --pretty=format:'%C(yellow)%gd %C(green)%ci %C(reset)%s%C(magenta)%d' --stat
  so = stash show --patch --color-words
  sol = stash show --patch
  sp = stash pop
  sa = stash apply
  sd = stash drop
  # stash swap
  ss = "!f(){(git su; git sp stash@{$((1 + ${1:-0}))})};f"

  # rebase
  rb = rebase
  rbi = rebase --interactive
  rbc = rebase --continue

  # log
  l   = log --pretty=format:'%C(yellow)%h %C(green)%cd %C(blue)%an %C(reset)%s%C(magenta)%d' --date=short
  ll  = log --pretty=format:'%C(yellow)%h %C(green)%cd %C(blue)%an %C(reset)%s%C(magenta)%d'
  lr  = log --pretty=format:'%C(yellow)%h %C(green)%cd %C(blue)%an %C(reset)%s%C(magenta)%d' --date=relative
  lp  = log --pretty=format:'%C(yellow)%h %C(green)%cd %C(blue)%an %C(reset)%s%C(magenta)%d%n' --date=short --patch --color-words
  lpl  = log --pretty=format:'%C(yellow)%h %C(green)%cd %C(blue)%an %C(reset)%s%C(magenta)%d%n' --date=short --patch
  ls  = log --pretty=format:'%C(yellow)%h %C(green)%cd %C(blue)%an %C(reset)%s%C(magenta)%d' --date=short --stat
  lg  = log --pretty=format:'%C(yellow)%h %C(green)%cd %C(blue)%an %C(reset)%s%C(magenta)%d' --date=short --graph
  lb  = log --pretty=format:'%C(yellow)%h %C(green)%ci %C(blue)%an%C(magenta)%d%+n%w(0, 4, 4)%B'
  lbp = log --pretty=format:'%C(yellow)%h %C(green)%ci %C(blue)%an%C(magenta)%d%+n%w(0, 4, 4)%B' --patch --color-words
  lbpl = log --pretty=format:'%C(yellow)%h %C(green)%ci %C(blue)%an%C(magenta)%d%+n%w(0, 4, 4)%B' --patch
  lbs = log --pretty=format:'%C(yellow)%h %C(green)%ci %C(blue)%an%C(magenta)%d%+n%w(0, 4, 4)%B' --stat
  lbg = log --pretty=format:'%C(yellow)%h %C(green)%ci %C(blue)%an%C(magenta)%d%+n%w(0, 4, 4)%B' --graph

  # show
  o  = show --pretty=format:'%C(yellow)%h %C(green)%ci %C(blue)%an%C(magenta)%d%+n%w(0, 4, 4)%B' --color-words
  os = show --pretty=format:'%C(yellow)%h %C(green)%ci %C(blue)%an%C(magenta)%d%+n%w(0, 4, 4)%B' --stat

  # new commands
  exec = "!exec "
  root = rev-parse --show-toplevel
  fixup = commit --fixup
  amend = commit --amend
  squash = "!f(){(git rebase --interactive HEAD~$1)};f"
  sq = squash
  find = !git ls-files | grep -iI
  f = find
  g = grep -niI --heading -C 5 --untracked
  rg = !git g
  aliases = !git config -l | grep alias | cut -c 7-

  # hub
  pr = pull-request

  # fzf
  z     = "!cd \"$GIT_PREFIX\"; git ls-files | fzf --ansi --multi"
  zs    = "!(cd \"$GIT_PREFIX\"; c='x=\"$(awk \"{print\\$2}\" <<< {})\"; (highlight -q --force -O ansi \"$x\" || less \"$x\") 2>/dev/null'; git -c color.status=always s | fzf --ansi --multi --preview \"$c\" --bind \"ctrl-o:execute[$c | less -R >&2]\" | awk '{$1=\"\";print}') | cut -c2-"
  zl    = "!(c='git o $(printf \"%s\n\" {} | cut -d\\  -f1)'; git l | fzf --ansi --no-sort --multi --preview \"$c\" --bind \"ctrl-o:execute-multi[$c | less -R >&2]\" | cut -d\\  -f1)"
  zb    = "!(c='git lbg $(awk \"{print\\$1}\" <<< {})'; git -c color.branch=always ba | cut -c3- | fzf --ansi --multi --preview \"$c\" --bind \"ctrl-o:execute[$c | less -R >&2]\" | awk '{print$1}')"
  zso   = "!(c='git so $(cut -d\\  -f1 <<< {})'; git sl | fzf --ansi --no-sort --multi --preview \"$c\" --bind \"ctrl-o:execute[$c | less -R >&2]\" | cut -d\\  -f1)"
  zd    = "!f(){(c='p=\"$(git d {})\"; [ \"$p\" ] && echo \"$p\" || less {}'; git dns \"$@\" | awk '{$1=\"\";print}' | cut -c2- | fzf --ansi --multi --preview \"$c\" --bind \"ctrl-o:execute-multi[$c | less -R >&2]\")};f"
  zdc   = "!(c='p=\"$(git dc {})\"; [ \"$p\" ] && echo \"$p\" || less {}'; git dcns | awk '{$1=\"\";print}' | cut -c2- | fzf --ansi --multi --preview \"$c\" --bind \"ctrl-o:execute-multi[$c | less -R >&2]\")"
  zg    = "!f(){(cd \"$GIT_PREFIX\"; c=\"cd $(git rev-parse --show-toplevel); git -c color.grep=always g $@ -- {}\"; git g -l \"$@\" | fzf --ansi --multi --preview \"$c\" --bind \"ctrl-o:execute-multi[$c | less -R >&2]\")};f"
  zcob  = "!f(){(local x=\"$(git zb)\";  [ \"$x\" ] && tr '\\n' '\\0' <<< \"$x\" | xargs -0 -n1 -i git co {} \"$@\")};f"
  zcocm = "!f(){(local x=\"$(git zl)\";  [ \"$x\" ] && tr '\\n' '\\0' <<< \"$x\" | xargs -0 -n1 -i git co {} \"$@\")};f"
  zdcm  = "!f(){(local x=\"$(git zl)\";  [ \"$x\" ] && tr '\\n' '\\0' <<< \"$x\" | xargs -0 -n1 -i git d {} \"$@\")};f"
  zocm  = "!f(){(local x=\"$(git zl)\";  [ \"$x\" ] && tr '\\n' '\\0' <<< \"$x\" | xargs -0 -n1 -i git o {} \"$@\" | less -R)};f"
  zrbi  = "!f(){(local x=\"$(git zl)\";  [ \"$x\" ] && tr '\\n' '\\0' <<< \"$x\" | xargs -0 -n1 -i git rbi {} \"$@\")};f"
  za    = "!f(){(local x=\"$(git zd)\";  [ \"$x\" ] && tr '\\n' '\\0' <<< \"$x\" | xargs -0 -n1 -i git a {} \"$@\")};f"
  zr    = "!f(){(local x=\"$(git zdc)\"; [ \"$x\" ] && tr '\\n' '\\0' <<< \"$x\" | xargs -0 -n1 -i git r {} \"$@\")};f"
  zsp   = "!f(){(local x=\"$(git zso)\"; [ \"$x\" ] && tr '\\n' '\\0' <<< \"$x\" | xargs -0 -n1 -i git sp {} \"$@\")};f"
  zsa   = "!f(){(local x=\"$(git zso)\"; [ \"$x\" ] && tr '\\n' '\\0' <<< \"$x\" | xargs -0 -n1 -i git sa {} \"$@\")};f"
  zsd   = "!f(){(local x=\"$(git zso)\"; [ \"$x\" ] && tr '\\n' '\\0' <<< \"$x\" | xargs -0 -n1 -i git sd {} \"$@\")};f"
  zcos  = "!f(){(local x=\"$(git zs)\";  [ \"$x\" ] && tr '\\n' '\\0' <<< \"$x\" | xargs -0 -n1 -i git co {} \"$@\")};f"
  zas   = "!f(){(local x=\"$(git zs)\";  [ \"$x\" ] && tr '\\n' '\\0' <<< \"$x\" | xargs -0 -n1 -i git a {} \"$@\")};f"
  zrs   = "!f(){(local x=\"$(git zs)\";  [ \"$x\" ] && tr '\\n' '\\0' <<< \"$x\" | xargs -0 -n1 -i git r {} \"$@\")};f"
